import json
import time
from pathlib import Path

# Configuration
PARAMS_FILE = config.get("params_file", "parameter_sets.json")
SAMPLE_SIZE = config.get("sample_size", 1000000)
N_REPLICATES = config.get("n_replicates", 5)

# Load parameter sets
with open(PARAMS_FILE) as f:
    PARAM_DATA = json.load(f)

PARAM_IDS = [p["param_set"] for p in PARAM_DATA["parameter_sets"]]

print(f"Loaded {len(PARAM_IDS)} parameter sets from {PARAMS_FILE}")


rule all:
    input:
        expand("results/paramset_{param_set}_shared.csv", param_set=PARAM_IDS),
        expand("results/paramset_{param_set}_circles.csv", param_set=PARAM_IDS),
        expand("results/paramset_{param_set}_duplex.csv", param_set=PARAM_IDS),


rule build_simulator:
    input:
        cargo_toml=Path(Path(workflow.basedir).parent, "simulator/Cargo.toml"),
        src_files=Path(Path(workflow.basedir).parent, "simulator/src/main.rs"),
    output:
        binary=Path(Path(workflow.basedir).parent, "simulator/target/release/simulator"),
    shell:
        """
        cargo build --release --manifest-path {input.cargo_toml}
        """


rule run_sim:
    input:
        simulator=rules.build_simulator.output.binary,
        params_json=PARAMS_FILE,
    output:
        shared="results/paramset_{param_set}_shared.csv",
        circles="results/paramset_{param_set}_circles.csv",
        duplex="results/paramset_{param_set}_duplex.csv",
    log:
        "logs/paramset_{param_set}.log",
    threads: 1
    run:
        param_data = PARAM_DATA["parameter_sets"][int(wildcards.param_set)]

        cmd_args = [
            str(input.simulator),
            "-n", str(SAMPLE_SIZE),
            "-N", str(param_data['N']),
            "-b", str(param_data['Nb']),
            "-g", str(param_data['Gs']),
            "-u", str(param_data['u_total']),
            "--output-prefix", f"results/paramset_{wildcards.param_set}",
            "-R", str(N_REPLICATES),
            "--seed", str(param_data.get('sim_seed', wildcards.param_set)),
            "--min-alt-reads", "2",
            "--min-depth-circles", "10",
            "--min-depth-duplex", "10",
        ]
        
        cmd = " ".join(cmd_args)
        
        print(f"Running param_set {wildcards.param_set}: N={param_data['N']}, Nb={param_data['Nb']}, Gs={param_data['Gs']}")
        
        shell(f"RUST_LOG=info {cmd} > {log} 2>&1")