import numpy as np
import json
import time
from pathlib import Path
from scipy.stats import loguniform, uniform, randint


DEPTH_FILES = [
    Path(Path(workflow.basedir), "circles_depth.bed"),
    Path(Path(workflow.basedir), "duplex_depth.bed"),
]

N_PARAM_SETS = 5
N_REPLICATES = 1
GENOME_SIZE = 1.2e6


def sample_parameters():
    # N (popsize) -> Unif(10^8, 10^10)
    N_values = uniform.rvs(loc=1e8, scale=9e9, size=N_PARAM_SETS).astype(int)

    # u (mutation rate per site) -> logUnif(10^-9, 10^-8)
    u_per_site = loguniform.rvs(1e-9, 1e-8, size=N_PARAM_SETS)
    u_total = u_per_site * GENOME_SIZE

    # Nb (bottleneck size) -> logUnif(1, 1000)
    Nb_values = loguniform.rvs(1, 1000, size=N_PARAM_SETS).astype(int)

    # Gs (stasis generations) -> Unif(100, 10000)
    Gs_values = uniform.rvs(loc=100, scale=9900, size=N_PARAM_SETS).astype(int)

    sim_seeds = randint.rvs(0, 2**32, size=N_PARAM_SETS)

    return [
        {
            "param_set": i,
            "sim_seed": int(sim_seeds[i]),
            "N": int(N_values[i]),
            "u_per_site": float(u_per_site[i]),
            "u_total": float(u_total[i]),
            "genome_size": int(GENOME_SIZE),
            "Nb": int(Nb_values[i]),
            "Gs": int(Gs_values[i]),
        }
        for i in range(N_PARAM_SETS)
    ]


rule all:
    input:
        expand("param_set_{param_set}/config.json", param_set=range(N_PARAM_SETS)),


rule generate_all_params:
    output:
        params_json="parameter_sets.json",
    run:
        param_sets = sample_parameters()

        output_data = {
            "generation_time": time.strftime("%Y-%m-%d %H:%M:%S"),
            "n_param_sets": N_PARAM_SETS,
            "n_replicates": N_REPLICATES,
            "genome_size": int(GENOME_SIZE),
            "parameter_sets": param_sets,
        }

        with open(output.params_json, "w") as f:
            json.dump(output_data, f, indent=2)


rule build_simulator:
    input:
        cargo_toml=Path(Path(workflow.basedir).parent, "simulator/Cargo.toml"),
        src_files=Path(Path(workflow.basedir).parent, "simulator/src/main.rs"),
    output:
        binary=Path(Path(workflow.basedir).parent, "simulator/target/release/simulator"),
    shell:
        """
        cargo build --release --manifest-path {input.cargo_toml}
        """


rule run_sim:
    input:
        simulator=rules.build_simulator.output.binary,
        params_json="parameter_sets.json",
    output:
        config="param_set_{param_set}/config.json",
    log:
        "param_set_{param_set}/log.txt",
    threads: 1
    run:
        import json

        with open(input.params_json, "r") as f:
            param_file = json.load(f)

        param_data = param_file["parameter_sets"][int(wildcards.param_set)]

        # Create output directory
        shell(f"mkdir -p param_set_{wildcards.param_set}")

        depth_files_str = ",".join(str(p) for p in DEPTH_FILES)

        cmd_args = [
            str(input.simulator),
            "--sample-size", "10000000",
            "--population-size", str(param_data['N']),
            "--bottleneck-size", str(param_data['Nb']),
            "--stasis-generations", str(param_data['Gs']),
            "--mutation-rate", str(param_data['u_total']),
            "--output-dir", f"param_set_{wildcards.param_set}",  
            "--runs", str(N_REPLICATES),
            "--seed", str(param_data['sim_seed']),
            "--depth-files", depth_files_str
        ]
        cmd = " ".join(cmd_args)
        
        print(f"Running command: {cmd}")

        
        shell(f"{cmd} > {log} 2>&1")
